import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import GridSearchCV

url = "path_to_your_creditcard.csv"  # Replace with the path to the dataset
data = pd.read_csv(url)

print("Data Info:")
print(data.info())  # Check for missing values and data types
print("Data Description:")
print(data.describe())  # Check for basic stats

# Separate features and target variable
features = data.drop(['Class'], axis=1)  # 'Class' is the target (fraudulent or not)
target = data['Class']

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

smote = SMOTE()
features_resampled, target_resampled = smote.fit_resample(features_scaled, target)

X_train, X_test, y_train, y_test = train_test_split(features_resampled, target_resampled, test_size=0.2, random_state=42)


logreg = LogisticRegression(max_iter=1000)  # Increase max_iter if convergence issues
logreg.fit(X_train, y_train)

rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)

y_pred_logreg = logreg.predict(X_test)
y_pred_rf = rf.predict(X_test)

print("\nLogistic Regression Evaluation:")
print(f"Precision: {precision_score(y_test, y_pred_logreg)}")
print(f"Recall: {recall_score(y_test, y_pred_logreg)}")
print(f"F1-score: {f1_score(y_test, y_pred_logreg)}")
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_logreg))

print("\nRandom Forest Evaluation:")
print(f"Precision: {precision_score(y_test, y_pred_rf)}")
print(f"Recall: {recall_score(y_test, y_pred_rf)}")
print(f"F1-score: {f1_score(y_test, y_pred_rf)}")
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_rf))

param_grid = {'n_estimators': [50, 100, 200], 'max_depth': [5, 10, 20]}
grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5)
grid_search.fit(X_train, y_train)

print("\nBest Parameters found by Grid Search:")
print(grid_search.best_params_)

best_rf = grid_search.best_estimator_
best_rf.fit(X_train, y_train)
y_pred_best_rf = best_rf.predict(X_test)

print("\nRandom Forest (Tuned) Evaluation:")
print(f"Precision: {precision_score(y_test, y_pred_best_rf)}")
print(f"Recall: {recall_score(y_test, y_pred_best_rf)}")
print(f"F1-score: {f1_score(y_test, y_pred_best_rf)}")
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_best_rf))
